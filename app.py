from flask import Flask, url_for, request, redirect, render_template, abort, render_template_string
import datetime
from lab1 import lab1

app = Flask(__name__)
app.register_blueprint(lab1)

@app.route("/")
@app.route("/index")
def index():
    return """ <!doctype html>
    <html> 
        <head>
        <title>–ù–ì–¢–£, –§–ë, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</title>
        </head>
    <body>
        <header>
            <h1>–ù–ì–¢–£, –§–ë, WEB-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–∞—Å—Ç—å 2. –°–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö</h1>
        </header>
    <nav>
        <ul>
            <li><a href="/lab1">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 1</a></li>
            <li><a href="/lab2">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</a></li>
        </ul>
    </nav>
    <footer>
        –û–±–µ–¥–∏–Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞, –ì—Ä—É–ø–ø–∞ –§–ë–ò-33, –ö—É—Ä—Å
    </footer>
</body>
</html>"""


@app.route('/reset_counter')
def reset_counter():
    global count
    count = 0
    return redirect(url_for('counter'))


@app.route("/create")
def created():
    return '''
<!doctype html>
    <html>
        <body>
            <h1>–°–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!</h1>
            <div><i>–ß—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞–Ω–æ...</i></div>
        </body>
    </html>
''', 201

@app.errorhandler(500)
def internal_error(err):
    return render_template('500.html'), 500

@app.route('/400')
def bad_request():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>400 Bad Request</title>
</head>
<body>
<h1>400 Bad Request</h1>
<p>–ó–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.</p>
</body>
</html>
""", 400

@app.route('/401')
def unauthorized():
    return """ <!doctype html>
    <html>
    <head>
    <title>401 Unauthorized</title>
    </head>
    <body>
    <h1>401 Unauthorized</h1>
    <p>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É–Ω—Ç–µ—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É.</p>
    </body>
    </html>""", 401

@app.route('/402')
def payment_required():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>402 Payment Required</title>
</head>
<body>
<h1>402 Payment Required</h1>
<p>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø–ª–∞—Ç–∞.</p>
</body>
</html>
""", 402

@app.route('/403')
def forbidden():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>403 Forbidden</title>
</head>
<body>
<h1>403 Forbidden</h1>
<p>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞.</p>
</body>
</html>
""", 403

@app.route('/405')
def method_not_allowed():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>405 Method Not Allowed</title>
</head>
<body>
<h1>405 Method Not Allowed</h1>
<p>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–µ—Ç–æ–¥ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–æ–º.</p>
</body>
</html>
""", 405

@app.route('/418')
def im_a_teapot():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>418 I'm a Teapot</title>
</head>
<body>
<h1>418 I'm a Teapot</h1>
<p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä —è–≤–ª—è–µ—Ç—Å—è —á–∞–π–Ω–∏–∫–æ–º –∏ –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –∑–∞–≤–∞—Ä–∏–≤–∞—Ç—å –∫–æ—Ñ–µ.</p>
</body>
</html>
""", 418

@app.errorhandler(404)
def not_found(err):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ip = request.remote_addr
        access_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        accessed_page = request.url
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        log_entry = f'{access_time}: {user_ip} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –Ω–∞ "{accessed_page}".'
        
        with open('access_log.txt', 'a', encoding='utf-8') as log_file:
            log_file.write(f'{log_entry}\n')
        
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        log_entries = []
        try:
            with open('access_log.txt', 'r', encoding='utf-8') as log_file:
                log_entries = log_file.read().strip().split('\n')
        except FileNotFoundError:
            pass
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
        context = {
            'ip_address': user_ip,
            'access_time': access_time,
            'home_link': '/',
            'log_entries': log_entries
        }
        
        return render_template('404.html', **context), 404
    
    except Exception as e:
        # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        app.logger.error(f'Error in 404 handler: {e}')
        return render_template('404.html'), 404
    
@app.route('/lab2/a')
def a():
    return '–±–µ–∑ —Å–ª–µ—à–∞'

@app.route('/lab2/a/')
def a2():
    return '—Å–æ —Å–ª–µ—à–æ–º'

flower_list = [
    {'name': '—Ä–æ–∑–∞', 'price': 150},
    {'name': '—Ç—é–ª—å–ø–∞–Ω', 'price': 80},
    {'name': '–Ω–µ–∑–∞–±—É–¥–∫–∞', 'price': 50},
    {'name': '—Ä–æ–º–∞—à–∫–∞', 'price': 40},
]


@app.route('/lab2/flowers/<int:flower_id>')
def flower_detail(flower_id):
    if flower_id >= len(flower_list):
        return f"–¶–≤–µ—Ç–æ–∫ —Å ID {flower_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    flower = flower_list[flower_id]
    
    html = f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–¶–≤–µ—Ç–æ–∫ #{flower_id}</title>
        <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
    </head>
    <body>
        <h1>üå∏ –¶–≤–µ—Ç–æ–∫ {flower_id}</h1>
        
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {flower['name']}</p>
        <p><strong>–¶–µ–Ω–∞:</strong> {flower['price']} —Ä—É–±.</p>
        
        <br>
        <a href="/lab2/all_flowers">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ü–≤–µ—Ç–æ–≤</a><br>
        <a href="/lab2/">‚Üê –ù–∞–∑–∞–¥ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ</a><br>
        <a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        
        <br><br>
        <small>–í—Å–µ–≥–æ —Ü–≤–µ—Ç–æ–≤: {len(flower_list)}</small>
    </body>
    </html>
    '''
    return html
    
@app.route('/lab2/add_flower/<name>')
def add_flower(name):
    flower_list.append(name)
    full_names = []
    for item in flower_list:
        if isinstance(item, dict):
            full_names.append(item['name'])
        else:
            full_names.append(item)
            
    formatted_names = ', '.join(full_names)

    return f'''
<!doctype html>
<html>
    <body>
    <h1>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–æ–∫</h1>
    <p>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∫–∞: {name} </p>
    <p> –í—Å–µ–≥–æ —Ü–≤–µ—Ç–∫–æ–≤: {len(flower_list)} </p>
    <p>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {formatted_names} </p>
    </body>
</html>
'''

@app.route('/lab2/example')
def example():
    name = '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –û–±–µ–¥–∏–Ω–∞'
    nomer = 2
    nomer_cursa = 3
    fruits = [
        {'name': '—è–±–ª–æ–∫–∏', 'price': 100},
        {'name': '–≥—Ä—É—à–∏', 'price': 120},
        {'name': '–∞–ø–µ–ª—å—Å–∏–Ω—ã', 'price': 80},
        {'name': '–º–∞–Ω–¥–∞—Ä–∏–Ω—ã', 'price': 95},
        {'name': '–º–∞–Ω–≥–æ', 'price': 321}
    ]
    return render_template('example.html', name=name, nomer=nomer, nomer_cursa=nomer_cursa, fruits=fruits)

@app.route('/lab2/')
def lab2():
    return """ <!doctype html>
    <html> 
        <head>
        <title>–ù–ì–¢–£, –§–ë, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</title>
        </head>
    <body>
        <header>
            <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</h1>
        </header>
        <h2>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h1>
    <nav>
        <ul>
            <li><a href="/lab2/flowers/2">–†–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–∞–º–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞</a></li>
            <li><a href="/lab2/example">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π, —É—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã </a></li>
            <li><a href="/lab2/filters">–§–∏–ª—å—Ç—Ä—ã</a></li>
            <li><a href="/lab2/calc">–ü–æ–¥—Å—á–µ—Ç</a></li>
            <li><a href="/lab2/books">–ö–Ω–∏–≥–∏</a></li>
            <li><a href="/lab2/berries">–Ø–≥–æ–¥—ã </a></li>
            <li><a href="/lab2/all_flowers">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</a></li>
        </ul>
    </nav>
    <a href="/index">–í–µ—Ä–Ω–∏—Ç—å—Å—è –Ω–∞–∑–∞–¥</a>
    <footer>
        –û–±–µ–¥–∏–Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞, –ì—Ä—É–ø–ø–∞ –§–ë–ò-33, –ö—É—Ä—Å
    </footer>
</body>
</html>"""

@app. route('/lab2/filters')
def filters() :
    phrase = "0 <b>—Å–∫–æ–ª—å–∫–æ</b> <u>–Ω–∞–º</u‚â• <i>–æ—Ç–∫—Ä—ã—Ç–∏–π</i> —á—É–¥–Ω—ã—Ö..."
    return render_template('filter.html', phrase = phrase)


@app.route('/lab2/add_flower', methods=['POST'])
def add_flower_form():
    name = request.form.get('name')
    price = request.form.get('price', 0)
    if name:
        flower_list.append({'name': name, 'price': int(price)})
    return redirect(url_for('all_flowers'))

@app.route('/lab2/add_flower/<name>')
def add_flower_old(name):
    flower_list.append({'name': name, 'price': 0})
    return redirect(url_for('all_flowers'))

@app.route('/lab2/all_flowers')
def all_flowers():
    return render_template('all_flowers.html', flowers=flower_list)

@app.route('/lab2/clear_flowers')
def clear_flowers():
    flower_list.clear()
    return redirect(url_for('all_flowers'))

@app.route('/lab2/calc/<int:a>/<int:b>')
def calculator(a, b):
    result = f"""a = {a}, b = {b}
{a} + {b} = {a + b}
{a} - {b} = {a - b}
{a} * {b} = {a * b}
{a} / {b} = {a / b}
{a} ** {b} = {a ** b}"""
    return result.replace('\n', '<br>')

@app.route('/lab2/calc/')
def calc_default():
    return redirect('/lab2/calc/1/1')

@app.route('/lab2/calc/<int:a>')
def calc_single_number(a):
    return redirect(f'/lab2/calc/{a}/1')

books = [
    {"author": "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "genre": "–†–æ–º–∞–Ω", "pages": 671},
    {"author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "genre": "–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è", "pages": 1225},
    {"author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤", "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "genre": "–†–æ–º–∞–Ω", "pages": 480},
    {"author": "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤", "title": "–†–∞—Å—Å–∫–∞–∑—ã", "genre": "–†–∞—Å—Å–∫–∞–∑—ã", "pages": 320},
    {"author": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω", "title": "–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω", "genre": "–†–æ–º–∞–Ω –≤ —Å—Ç–∏—Ö–∞—Ö", "pages": 240},
    {"author": "–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å", "title": "–ú—ë—Ä—Ç–≤—ã–µ –¥—É—à–∏", "genre": "–ü–æ—ç–º–∞", "pages": 352},
    {"author": "–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤", "title": "–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏", "genre": "–†–æ–º–∞–Ω", "pages": 288},
    {"author": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "title": "–ì—Ä–æ–∑–∞", "genre": "–î—Ä–∞–º–∞", "pages": 120},
    {"author": "–ú–∏—Ö–∞–∏–ª –õ–µ—Ä–º–æ–Ω—Ç–æ–≤", "title": "–ì–µ—Ä–æ–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "genre": "–†–æ–º–∞–Ω", "pages": 224},
    {"author": "–ò–≤–∞–Ω –ì–æ–Ω—á–∞—Ä–æ–≤", "title": "–û–±–ª–æ–º–æ–≤", "genre": "–†–æ–º–∞–Ω", "pages": 576}
]

@app.route('/lab2/books')
def show_books():
    return render_template('books.html', books=books)

berries = [
    {"name": "–ö–ª—É–±–Ω–∏–∫–∞", "image": "strawberry.jpg", "description": "–°–ª–∞–¥–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è —è–≥–æ–¥–∞, –±–æ–≥–∞—Ç–∞—è –≤–∏—Ç–∞–º–∏–Ω–æ–º C"},
    {"name": "–ú–∞–ª–∏–Ω–∞", "image": "raspberry.jpg", "description": "–ê—Ä–æ–º–∞—Ç–Ω–∞—è —è–≥–æ–¥–∞, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–µ—Å–µ—Ä—Ç–∞—Ö"},
    {"name": "–ß–µ—Ä–Ω–∏–∫–∞", "image": "blueberry.jpg", "description": "–ú–∞–ª–µ–Ω—å–∫–∞—è —Å–∏–Ω—è—è —è–≥–æ–¥–∞, –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∑—Ä–µ–Ω–∏—è"},
    {"name": "–ï–∂–µ–≤–∏–∫–∞", "image": "blackberry.jpg", "description": "–¢—ë–º–Ω–∞—è —è–≥–æ–¥–∞ —Å –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–º –≤–∫—É—Å–æ–º"},
    {"name": "–°–º–æ—Ä–æ–¥–∏–Ω–∞", "image": "currant.jpg", "description": "–ë—ã–≤–∞–µ—Ç —á—ë—Ä–Ω–∞—è, –∫—Ä–∞—Å–Ω–∞—è –∏ –±–µ–ª–∞—è, –±–æ–≥–∞—Ç–∞ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏"},
    {"name": "–ö—Ä—ã–∂–æ–≤–Ω–∏–∫", "image": "gooseberry.jpg", "description": "–ó–µ–ª—ë–Ω–∞—è —è–≥–æ–¥–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –∫–∏—Å–ª–æ–≤–∞—Ç—ã–º –≤–∫—É—Å–æ–º"},
    {"name": "–ó–µ–º–ª—è–Ω–∏–∫–∞", "image": "wild_strawberry.jpg", "description": "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º"},
    {"name": "–ë—Ä—É—Å–Ω–∏–∫–∞", "image": "lingonberry.jpg", "description": "–ö—Ä–∞—Å–Ω–∞—è —è–≥–æ–¥–∞ —Å –≥–æ—Ä—å–∫–æ–≤–∞—Ç—ã–º –ø—Ä–∏–≤–∫—É—Å–æ–º"},
    {"name": "–ö–ª—é–∫–≤–∞", "image": "cranberry.jpg", "description": "–ö–∏—Å–ª–∞—è —è–≥–æ–¥–∞, —Ä–∞—Å—Ç—É—â–∞—è –Ω–∞ –±–æ–ª–æ—Ç–∞—Ö"},
    {"name": "–û–±–ª–µ–ø–∏—Ö–∞", "image": "sea_buckthorn.jpg", "description": "–û—Ä–∞–Ω–∂–µ–≤–∞—è —è–≥–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –º–∞—Å–µ–ª"},
    {"name": "–ì–æ–ª—É–±–∏–∫–∞", "image": "bilberry.jpg", "description": "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ —á–µ—Ä–Ω–∏–∫—É"},
    {"name": "–®–∏–ø–æ–≤–Ω–∏–∫", "image": "rose_hip.jpg", "description": "–ü–ª–æ–¥—ã —Ä–æ–∑—ã, –±–æ–≥–∞—Ç—ã–µ –≤–∏—Ç–∞–º–∏–Ω–æ–º C"},
    {"name": "–ë–æ—è—Ä—ã—à–Ω–∏–∫", "image": "hawthorn.jpg", "description": "–ö—Ä–∞—Å–Ω—ã–µ —è–≥–æ–¥—ã, –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è —Å–µ—Ä–¥—Ü–∞"},
    {"name": "–ò—Ä–≥–∞", "image": "serviceberry.jpg", "description": "–°–ª–∞–¥–∫–∏–µ —Å–∏–Ω–∏–µ —è–≥–æ–¥—ã, —Ä–∞—Å—Ç—É—â–∏–µ –Ω–∞ –∫—É—Å—Ç–∞—Ö"},
    {"name": "–ö–∞–ª–∏–Ω–∞", "image": "viburnum.jpg", "description": "–ö—Ä–∞—Å–Ω—ã–µ –≥–æ—Ä—å–∫–∏–µ —è–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–∞—Ä–æ–¥–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ"},
    {"name": "–†—è–±–∏–Ω–∞", "image": "rowan.jpg", "description": "–û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–µ —è–≥–æ–¥—ã, —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–ª–∞–¥–∫–∏–º–∏ –ø–æ—Å–ª–µ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤"},
    {"name": "–ß–µ—Ä—ë–º—É—Ö–∞", "image": "bird_cherry.jpg", "description": "–ß—ë—Ä–Ω—ã–µ –∞—Ä–æ–º–∞—Ç–Ω—ã–µ —è–≥–æ–¥—ã —Å –≤—è–∂—É—â–∏–º –≤–∫—É—Å–æ–º"},
    {"name": "–ê—Ä–æ–Ω–∏—è", "image": "chokeberry.jpg", "description": "–ß—ë—Ä–Ω–æ–ø–ª–æ–¥–Ω–∞—è —Ä—è–±–∏–Ω–∞, –±–æ–≥–∞—Ç–∞—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–∞–º–∏"},
    {"name": "–ñ–∏–º–æ–ª–æ—Å—Ç—å", "image": "honeysuckle.jpg", "description": "–°–∏–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç—ã–µ —è–≥–æ–¥—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–∫—É—Å–æ–º"},
    {"name": "–í–∏–Ω–æ–≥—Ä–∞–¥", "image": "grape.jpg", "description": "–°–æ—á–Ω—ã–µ —è–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –µ–¥—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–∏–Ω–∞"}
]

@app.route('/lab2/berries')
def show_berries():
    return render_template('berries.html', berries=berries)

@app.route('/lab2/delete_flower/<int:flower_id>')
def delete_flower(flower_id):
    if flower_id >= len(flower_list):
        abort(404)
    flower_list.pop(flower_id)
    return redirect(url_for('all_flowers'))